#!/bin/bash
## ============================================================================
## Filename          : $RCSfile$
## Version           : $Revision$
## Release           : $Name$
##
## Original author   : Peter Dreisiger, MOD, DSTO Stirling
## Original date     : 14-Mar-2009
## Last modified by  : $Author$
## Last modified on  : $Date$
##
## Security class.   : UNCLASSIFIED
## Copyright         : DSTO
##
## Purpose           : This shell script goes through all of the term DR/
##                     error files generated by the FGREP console, and 
##                     collects the error-vs-epoch data into a single
##                     output file.
##
## Revision history  :
## ============================================================================
maxepochs=200
steps=500
infile=iteration
outfile=terms

# Construct the first column (the epoch counter);
echo epoch > ${outfile}--epochs.error
for (( i = 0; i <= maxepochs; i++ )); do
  echo $(( $steps * $i )) >> ${outfile}--epochs.error
done


# then, for each term, create a single-column file of its errors squared,
terms=`cat ${infile}--0.term | grep -v DontCare | grep -v NULL | awk '{ print $1 }'`
for term in $terms; do
  echo $term > ${outfile}--${term}.error
  for (( i = 0; i <= maxepochs; i++ )); do
    epoch=$(( $steps * $i ))
    grep "^ *$term" ${infile}--${epoch}.term | awk '{ print $NF }' >> ${outfile}--${term}.error
  done
done

# paste these files together, and clean up after ourselves.
pastearg=${outfile}--epochs.error
for term in $terms; do
  pastearg="${pastearg} ${outfile}--${term}.error"
done
paste $pastearg > ${outfile}.error
rm ${outfile}--*.error


# Finally, generate the gnuplot command file needed to plot them
echo "set logscale xy" > ${outfile}.gnuplot
echo "set key off" >> ${outfile}.gnuplot
echo "set xlabel 'epochs'" >> ${outfile}.gnuplot
echo "set ylabel 'per-term errors squared'" >> ${outfile}.gnuplot
echo "plot \\" >> ${outfile}.gnuplot
colno=2
for term in $terms; do
  echo "'${outfile}.error' using 1:${colno} with lines title '${term}', \\" >> ${outfile}.gnuplot
  colno=$(( $colno + 1 ))
done

#echo "set logscale xy" > ${outfile}--average.gnuplot
#echo -n "plot '${outfile}.error' using 1:(" >> ${outfile}--average.gnuplot
# plot 'terms.error' using 1:4 with lines title 'first', '' using 1:($4 + $5 + $6) / 3 with lines title 'avg'
#for (( i = 4; i < $colno; i++ )); do
#  echo -n "\$$i + " >> ${outfile}--average.gnuplot
#done
#echo -n ") / $colno with lines 
