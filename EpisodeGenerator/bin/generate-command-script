#!/bin/bash
## ============================================================================
## Filename          : $RCSfile: generate-command-script,v $
## Version           : $Revision: 1.2 $
## Release           : $Name:  $
##
## Original author   : Peter Dreisiger, MOD, DSTO Stirling
## Original date     : 13-Mar-2009
## Last modified by  : $Author: prd $
## Last modified on  : $Date: 2009/03/13 13:06:57 $
##
## Security class.   : UNCLASSIFIED
## Copyright         : DSTO
##
## Purpose           : This shell script generates the end-matter of the
##                     FGREP Console scripts --- i.e. the commands to setup
##                     the learning and output parameters, and the commands
##                     that trigger the training and the saving of data.
##
## Revision history  :
## ============================================================================
if (( $# == 0 )); then
  echo "Usage: $0 <name-of-generated-file>"
  exit 1
fi

outfile=$1.com

echo "# Script automatically generated by `basename $0` on `date "+%Y/%m/%d at %H:%M"`" > $outfile
echo "# from the input file '$1'" >> $outfile
awk '{ for (i = 1; i <= NF; i++) print "declare-term " $i }' $1 | sort | uniq >> $outfile
echo >> $outfile
awk '{ if (NF > 0) print "add-sentence " $0 }' $1 >> $outfile
echo >> $outfile
echo >> $outfile

echo "# First we initialise the learning and output parameters," >> $outfile
echo "set learning-algorithm batch" >> $outfile
echo "set learning-rate 0.1" >> $outfile
echo "set print-errors 1" >> $outfile
echo >> $outfile
echo >> $outfile

echo "# save our untrained network and representations," >> $outfile
echo "set quiet 1" >> $outfile
echo "set output-file iteration--0.meta" >> $outfile
echo "process-representations" >> $outfile
echo "show cpu-time-total epochs seed" >> $outfile
echo "set output-file iteration--0.expr" >> $outfile
echo "inspect-sentences" >> $outfile
echo "set output-file iteration--0.term" >> $outfile
echo "inspect-terms" >> $outfile
echo "set output-file stdout" >> $outfile
echo "save iteration--0.save" >> $outfile
echo >> $outfile
echo >> $outfile

echo "# and start the training process." >> $outfile
steps=100
for (( i = 1; i <= 3; i++)); do
  for (( j = 1; j < 10; j++)); do
    epochs=$(( $j * $steps ))
    echo "set output-file iteration--$epochs.meta" >> $outfile
    echo "train-network iterations $steps" >> $outfile
    echo "show cpu-time-total epochs seed" >> $outfile
    echo "set output-file iteration--$epochs.expr" >> $outfile
    echo "inspect-sentences" >> $outfile
    echo "set output-file iteration--$epochs.term" >> $outfile
    echo "inspect-terms" >> $outfile
    echo "set output-file stdout" >> $outfile
    echo "save iteration--$epochs.save" >> $outfile
    echo >> $outfile
  done
  steps=$(( $steps * 10 ))
done
steps=$(( $steps / 10 ))
epochs=$(( $j * $steps ))
echo "set output-file iteration--$epochs.meta" >> $outfile
echo "train-network iterations $steps" >> $outfile
echo "show cpu-time-total epochs seed" >> $outfile
echo "set output-file iteration--$epochs.expr" >> $outfile
echo "inspect-sentences" >> $outfile
echo "set output-file iteration--$epochs.term" >> $outfile
echo "inspect-terms" >> $outfile
echo "set output-file stdout" >> $outfile
echo "save iteration--$epochs.save" >> $outfile
echo >> $outfile

echo "set quiet 0" >> $outfile
